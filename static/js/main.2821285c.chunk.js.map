{"version":3,"sources":["components/Header.js","components/SearchArea.js","components/BookCard.js","components/Footer.js","components/Books.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["bookListIcon","icon","faBookReader","size","Header","className","href","Component","searchIcon","faSearch","SearchArea","props","id","action","onSubmit","searchBook","type","name","placeholder","onChange","handleSearch","value","searchField","required","ref","myRef","BookCard","volumeInfo","undefined","info","title","authors","publisher","infoLink","thumbNail","subtitle","publishedDate","hasOwnProperty","imageLinks","thumbnail","publishYear","src","alt","length","join","substring","onClick","addToBookList","Footer","Books","removeFromBookList","book","firebase","database","child","remove","e","console","log","target","setState","preventDefault","q","state","axios","get","then","data","books","items","catch","hasError","scrollToMyRef","window","scrollTo","current","offsetTop","React","createRef","sort","bookList","on","snapshot","val","key","bookInfo","push","this","map","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2821285c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBookReader } from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst bookListIcon = <FontAwesomeIcon icon={faBookReader} size=\"4x\" />;\n\n\nclass Header extends Component {\n  render() {\n    return (\n      <div>\n        <header>\n          <div className=\"top-bar\">\n            <h1>My Booklist App</h1>\n\n            <a href=\"#booklist\">\n              {bookListIcon}\n            </a>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nconst searchIcon = <FontAwesomeIcon icon={faSearch} size=\"2x\" />;\n\nconst SearchArea = (props) => {\n        return (\n            <div>\n                <div className=\"searchArea\" id=\"search\">\n                    <form action=\"\" \n                    onSubmit={props.searchBook}>\n                        <input \n                        type=\"text\" \n                        id=\"newBookTitle\" \n                        name=\"search\" \n                        placeholder=\"search by title, author, or subject\"\n                        onChange={props.handleSearch} \n                        value={props.searchField}\n                        required></input>\n                        <button type=\"submit\" ref={props.myRef}>{searchIcon}\n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n}\n\nexport default SearchArea;\n","import React from \"react\";\n\nconst BookCard = (props) => {\n    const { volumeInfo } = props.info === undefined ? \"No results\" : props.info ;\n    const { title, authors, publisher, infoLink, subtitle, publishedDate } = props.info.volumeInfo;\n    const thumbNail = volumeInfo.hasOwnProperty('imageLinks') == false ? \"https://i.imgur.com/sJ3CT4V.gif\" : volumeInfo.imageLinks.thumbnail;\n    const publishYear = volumeInfo.hasOwnProperty('publishedDate') == false ? volumeInfo['publishedDate'] = \"0000\" : volumeInfo.publishedDate;\n    return (\n        <li className=\"card-container\">\n            <img src={thumbNail} alt={title} />\n            <div className=\"book-description\">\n                <h3>{title}</h3>\n                <h4>Written by: {authors && authors.length > 1 ? authors.join(\", \") : authors}</h4>\n                <p>Publisher: {publisher}, {publishYear == \"0000\" ? \"Not available\" : publishYear.substring(0,4)} </p>\n                <a href={infoLink}>Buy the Book</a>\n            </div>              \n            <div className=\"addToBookList\">\n                <button onClick={() => props.addToBookList(volumeInfo)}>Add To Book List</button>       \n            </div>\n        </li>\n        );\n};\n\nexport default BookCard;\n","\nimport React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className='footer'>\n                <p>Created by Henry Adusei, &copy; 2020. Powered by Google Books API</p>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport SearchArea from \"./SearchArea\";\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport BookCard from \"./BookCard\";\nimport Footer from \"./Footer\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nconst searchIcon = <FontAwesomeIcon icon={faSearch} size=\"2x\" />;\n\n\nclass Books extends Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n\n        this.state = {\n        books: [],\n        searchField: \"\",\n        sort: \"\",\n        bookList: [],\n        };\n    }\n\n// establishing connection to firebase log\n    componentDidMount() {\n        const dbRef = firebase.database().ref(\"bookList\");\n            dbRef.on(\"value\", (snapshot) => {\n            const data = snapshot.val();\n            const bookList = [];\n                for (let key in data) {\n                    const bookInfo = {\n                    key: key,\n                    name: data[key],\n                    };\n                    bookList.push(bookInfo);\n                }\n                this.setState({\n                    bookList: bookList,\n                });\n            });\n    }\n\n  // Add a book to the Book list \n    addToBookList(book) {\n        const dbRef = firebase.database().ref(\"bookList\");\n        dbRef.push(book);\n    }\n\n// Remove a book from the book list\n    removeFromBookList = (book) => {\n        const dbRef = firebase.database().ref(\"bookList\");\n        dbRef.child(book).remove();\n    };\n\n  // this method will set the state every time we input into the input box.\n    handleSearch = (e) => {\n        console.log(e.target.value);\n        this.setState({\n            searchField: e.target.value,\n        });\n    };\n\n  // this method will call the api and search for books when the form is submitted\n    searchBook = (e) => {\n        e.preventDefault();\n        const apiKey = \"AIzaSyBqTK7Yg9I-VNwKgb9Md0W6K0VanuDIBIM\";\n        const q = this.state.searchField;\n        const maxResults = 40;\n        const startIndex = 0;\n        axios\n            .get(\n                `https://www.googleapis.com/books/v1/volumes?q=${q}&key=${apiKey}&maxResults=${maxResults}&startIndex=${startIndex}`\n            )\n            .then((data) => {\n                console.log(data);\n                this.setState({ books: [...data.data.items] });\n            })\n            .catch(() => {\n                this.setState({\n                hasError: false,\n                });\n            });\n            this.setState({\n                searchField: \"\",\n            });\n            this.scrollToMyRef(this.myRef);\n    };\n\n    scrollToMyRef = () => window.scrollTo(0, this.myRef.current.offsetTop);\n\n    render() {\n        return (\n            <div>\n                <div className=\"wrapper\">\n                    <div className=\"main\" ref={this.myRef}>\n                            <SearchArea\n                                searchBook={this.searchBook}\n                                handleSearch={this.handleSearch}\n                            />\n                    </div>\n                </div>\n                    {!this.state.books ? (\n                        <h2>There were no matches, please try again</h2>\n                    ) : (\n                        <ul className=\"results\">\n                            {this.state.books.map((book) => {\n                                return (\n                                <BookCard\n                                    key={book.id}\n                                    info={book}\n                                    addToBookList={this.addToBookList}\n                                />\n                                );\n                            })}\n                        </ul>\n\n            )}\n\n            <div className=\"wrapper\">\n                <div className=\"bookList\">\n                    <div className=\"bookListContainer\">\n                        <h2 className=\"bookListHeading\" id=\"booklist\">My Book List</h2>\n                        <a href=\"#search\" className='backToSearchLink'>{searchIcon}Back to Search</a>\n                    </div>\n                    <div className=\"bookListContent\">\n                        {this.state.bookList.map((book) => {\n                            return (\n                                <div key={book.key}>\n                                    <div className=\"bookListCardContainer\">\n                                        <img src={book.name.imageLinks.thumbnail} alt={book.name.title} />\n                                        <div className=\"book-description\">\n                                            <h3>{book.name.title}</h3>\n                                            <h4>Written by: {book.name.authors && book.name.authors.length > 1 ? book.name.authors.join(\", \") : book.name.authors}</h4>\n                                        </div>\n                                        <button onClick={ () => {this.removeFromBookList(book.key) }}>Remove from Book list</button>  \n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n                <Footer />\n        </div>\n        );\n    }\n}\n\nexport default Books;\n","import firebase from 'firebase';\n\n  // Your web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyBhrgugLuYsqQwv1hISIaqZ7ZYyFb7Zu7c\",\n    authDomain: \"project-five-react-app.firebaseapp.com\",\n    databaseURL: \"https://project-five-react-app.firebaseio.com\",\n    projectId: \"project-five-react-app\",\n    storageBucket: \"project-five-react-app.appspot.com\",\n    messagingSenderId: \"764839463965\",\n    appId: \"1:764839463965:web:a41d6a8afe2c5bba0b8af4\"\n    };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Books from './components/Books';\nimport firebase from './firebase';\n\n// Items to complete for Book list app\n\n  // user can create multiple lists, and they can name their lists \n  //  user cannot add a book to list if the book has already been added\n  // if there is no results, display message that says \"sorry, no results.\"\n  // styling\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      books: [],\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <Header />\n        </div>\n          <Books />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}