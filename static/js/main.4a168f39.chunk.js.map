{"version":3,"sources":["components/Header.js","components/Main.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","Main","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleFormSubmit","event","preventDefault","console","log","updateTitle","userBookTitle","target","value","setState","newBookTitle","updateAuthor","userAuthor","newAuthor","updatePublisher","userPublisher","newPublisher","updateSubject","userSubject","newSubject","updateBalanceOnHand","userBalanceOnHand","newBalanceOnHand","newBookSubmission","database","ref","update","state","author","subject","balanceOnHand","publisher","updateInventory","bookKey","currentBookBalance","bookDbRef","convertToNum","parseInt","bookUnitsToAdd","updateBookUnits","convertToNumber","books","newBookInput","on","response","booksData","val","bookInventory","title","bookInfo","key","name","push","className","action","htmlFor","type","id","onChange","this","updateBookTitle","onClick","map","book","index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a168f39.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div>\n        <header>\n          <h1>Book Inventory Manager</h1>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport firebase from 'firebase';\n\nclass Main extends Component {\n  render() {\n    return (\n      <div>\n        <h2>\n          Let's update our inventory of new books we just recieved in our\n          shipment today!{\" \"}\n        </h2>\n      </div>\n    );\n  }\n}\n\nexport default Main;","import firebase from 'firebase';\n\n  // Your web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyBhrgugLuYsqQwv1hISIaqZ7ZYyFb7Zu7c\",\n    authDomain: \"project-five-react-app.firebaseapp.com\",\n    databaseURL: \"https://project-five-react-app.firebaseio.com\",\n    projectId: \"project-five-react-app\",\n    storageBucket: \"project-five-react-app.appspot.com\",\n    messagingSenderId: \"764839463965\",\n    appId: \"1:764839463965:web:a41d6a8afe2c5bba0b8af4\"\n    };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport firebase from './firebase';\n\n// Component Did Mount\n  // Establish firebase call for inventory - Done\n  // store inventory inside the array for books - Done\n  // Set state - Done\n\n// Render\n  // Map through the books inventory array - Done\n  // Display the books information - Done\n\n  // For each book, attach a button to update the information on click event - Done\n  // Add a new book button on click event\n\n// Update \n  // Display a form preloaded with book info inside of input fields (only allowed to update inventory)\n  // Listen to user input\n  // Set state of user input\n\n// On Add\n  // display empty form with parameters for new book\n  // On submit, add book to firebase and return to storefront homepage.\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      books: [],\n      newBookInput: \"\",\n      bookUnitsToAdd: 0\n    };\n\n  }\n\n  componentDidMount() {\n    // Creating a variable that holds the reference to books inventory in Firebase\n    const dbRef = firebase.database().ref();\n    dbRef.on(\"value\", response => {\n      const booksData = response.val();\n\n      const bookInventory = [];\n\n      for (let title in booksData) {\n        const bookInfo = {\n          key: title,\n          name: booksData[title]\n        };\n\n        bookInventory.push(bookInfo);\n      }\n      this.setState({\n        books: bookInventory\n      });\n    });\n  }\n\n  // Adding a new book to the database\n  handleFormSubmit = event => {\n    event.preventDefault();\n    console.log(\"Book has been added to database!\");\n\n    // this.setState({\n    //   newBookInput: event.target.value\n    // });\n  };\n  // Filling out blank form for new book\n\n  // book title\n  updateTitle = (event) => {\n    event.preventDefault();\n    const userBookTitle = event.target.value;\n\n    this.setState({\n      newBookTitle: userBookTitle,\n    })\n  };\n\n  // author\n  updateAuthor = (event) => {\n    event.preventDefault();\n    const userAuthor = event.target.value;\n\n    this.setState({\n      newAuthor: userAuthor,\n    })\n  };\n\n  // publisher\n  updatePublisher = (event) => {\n    event.preventDefault();\n    const userPublisher = event.target.value;\n\n    this.setState({\n      newPublisher: userPublisher,\n    })\n  };\n\n  // subject\n  updateSubject = (event) => {\n    event.preventDefault();\n    const userSubject = event.target.value;\n\n    this.setState({\n      newSubject: userSubject,\n    })\n  };\n\n  // balance on hand\n  updateBalanceOnHand = (event) => {\n    event.preventDefault();\n\n    const userBalanceOnHand = event.target.value;\n    this.setState({\n      newBalanceOnHand: userBalanceOnHand,\n    })\n  };\n\n  newBookSubmission = (event) => {\n    event.preventDefault();\n    const formDb = firebase.database().ref();\n\n    formDb.update({\n      [`${this.state.newBookTitle}`]: {\n        author: this.state.newAuthor,\n        subject: this.state.newSubject,\n        balanceOnHand: this.state.newBalanceOnHand,\n        publisher: this.state.newPublisher,\n      }\n    })\n  };\n\n\n\n  // Updating the balance on hand for each book in the database (on at a time)\n  updateInventory = (event, bookKey, currentBookBalance) => {\n    event.preventDefault();\n    console.log(\"Inventory is being updated for each book!\", bookKey);\n\n    const bookDbRef = firebase.database().ref(`/${bookKey}`);\n    const convertToNum = parseInt(currentBookBalance);\n    console.log(convertToNum);\n\n    bookDbRef.update({\n      balanceOnHand: convertToNum + this.state.bookUnitsToAdd\n    });\n  };\n\n  // Setting updateBookUnits to state\n  updateBookUnits = event => {\n    const convertToNumber = parseInt(event.target.value);\n    this.setState({\n      bookUnitsToAdd: convertToNumber\n    });\n  };\n\n  // componentDidUpdate() {\n  //   console.log(\"component has updated\");\n\n  //   this.setState = {\n\n  //   }\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n\n        {/* Blank form to submit new book information (name and key) to database */}\n        <form\n          className=\"newForm\"\n          action=\"submit\"\n        >\n          <fieldset>\n            <legend>Please fill in the information below</legend>\n            <label htmlFor=\"updateTitle\">Book title</label>\n            <input\n              type=\"text\"\n              id=\"newBookTitle\"\n              onChange={this.updateBookTitle}\n            ></input>\n\n            <label htmlFor=\"updateAuthor\">Author</label>\n            <input type=\"text\" id=\"newAuthor\" onChange={this.newAuthor}></input>\n\n            <label htmlFor=\"updatePublisher\">Publisher</label>\n            <input\n              type=\"text\"\n              id=\"newPublisher\"\n              onChange={this.updatePublisher}\n            ></input>\n\n            <label htmlFor=\"updateSubject\">Subject</label>\n            <input\n              type=\"text\"\n              id=\"newSubject\"\n              onChange={this.updateSubject}\n            ></input>\n\n            <label htmlFor=\"updateBalanceOnHand\">Balance on Hand</label>\n            <input\n              type=\"number\"\n              id=\"newBalanceOnHand\"\n              onChange={this.updateBalanceOnHand}\n            ></input>\n\n            <button\n              type=\"submit\"\n              onClick={event => {\n                this.newBookSubmission();\n              }}\n            >\n              Add new book\n            </button>\n          </fieldset>\n        </form>\n\n        <ul>\n          {this.state.books.map((book, index) => {\n            return (\n              <li key={index}>\n                <p>{book.key}</p>\n                <p>Written by: {book.name.author}</p>\n                <p>Units on hand: {book.name.balanceOnHand}</p>\n\n                <form>\n                  <label htmlFor=\"inventoryUpdate\">\n                    Enter # of Units to add\n                  </label>\n                  <input type=\"number\" onChange={this.updateBookUnits}></input>\n                  <button\n                    onClick={event => {\n                      this.updateInventory(\n                        event,\n                        book.key,\n                        book.name.balanceOnHand\n                      );\n                    }}\n                  >\n                    Update Inventory\n                  </button>\n                </form>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}